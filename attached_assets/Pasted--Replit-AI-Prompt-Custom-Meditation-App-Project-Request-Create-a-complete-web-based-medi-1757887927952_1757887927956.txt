# Replit AI Prompt - Custom Meditation App

## Project Request

Create a complete web-based meditation app with AI-generated personalized meditations. This is a beta version that will eventually become a mobile app. The app should generate custom meditation scripts using OpenAI, convert them to speech, and combine with background sounds and images.

## Technical Stack Required

- **Frontend**: React with TypeScript, mobile-responsive design using Tailwind CSS
- **Backend**: Node.js with Express
- **Database**: Replit Database (key-value store)
- **Authentication**: Firebase Auth (for Google, Apple, and email/password)
- **AI**: OpenAI GPT-4 for script generation
- **Text-to-Speech**: Web Speech API (browser-based TTS)
- **Styling**: Tailwind CSS with meditation-themed design
- **State Management**: React Context API
- **File Storage**: Base64 encoding for images in Replit Database initially

## Project Structure

```
meditation-app/
├── client/
│   ├── src/
│   │   ├── components/
│   │   │   ├── Auth/
│   │   │   │   ├── LoginForm.tsx
│   │   │   │   ├── SignupForm.tsx
│   │   │   │   └── SocialAuth.tsx
│   │   │   ├── Meditation/
│   │   │   │   ├── TypeSelector.tsx
│   │   │   │   ├── PersonalizationForm.tsx
│   │   │   │   ├── MeditationPlayer.tsx
│   │   │   │   └── GenerationProgress.tsx
│   │   │   ├── Library/
│   │   │   │   ├── MyMeditations.tsx
│   │   │   │   ├── CommunityLibrary.tsx
│   │   │   │   └── MeditationCard.tsx
│   │   │   └── Layout/
│   │   │       ├── Header.tsx
│   │   │       ├── Navigation.tsx
│   │   │       └── Footer.tsx
│   │   ├── contexts/
│   │   │   ├── AuthContext.tsx
│   │   │   └── MeditationContext.tsx
│   │   ├── services/
│   │   │   ├── api.ts
│   │   │   ├── openai.ts
│   │   │   └── tts.ts
│   │   ├── utils/
│   │   │   └── helpers.ts
│   │   ├── App.tsx
│   │   └── index.tsx
│   └── public/
│       └── backgrounds/
│           ├── beach.jpg
│           ├── mountains.jpg
│           ├── forest.jpg
│           ├── lake.jpg
│           └── abstract.jpg
├── server/
│   ├── routes/
│   │   ├── auth.js
│   │   ├── meditation.js
│   │   ├── library.js
│   │   └── community.js
│   ├── services/
│   │   ├── openaiService.js
│   │   ├── meditationGenerator.js
│   │   └── databaseService.js
│   ├── middleware/
│   │   └── auth.js
│   └── index.js
├── package.json
├── .env
└── README.md
```

## Core Features to Implement

### 1. User Authentication System
```javascript
// Implement Firebase Auth with these providers:
- Email/Password authentication
- Google OAuth
- Apple Sign In
- Session management with JWT tokens
- User profile creation and storage in Replit Database
```

### 2. Meditation Creation Flow

Create a multi-step form with these components:

```typescript
// Step 1: Meditation Type Selection
const meditationTypes = [
  { id: 'manifestation', name: 'Manifestation', description: 'Goal-specific affirmations' },
  { id: 'relaxation', name: 'Relaxation', description: 'Stress relief and calming' },
  { id: 'sleep', name: 'Sleep', description: 'Bedtime and sleep-inducing' },
  { id: 'visualization', name: 'Visualization', description: 'Guided imagery' },
  { id: 'affirmations', name: 'Affirmations', description: 'Positive self-talk' }
];

// Step 2: Personalization Settings
const personalizationOptions = {
  voice: ['male', 'female'],
  duration: [5, 10, 15, 20, 30], // minutes
  backgroundSound: ['ocean_waves', 'forest_sounds', 'rain', 'white_noise', 'ambient_music', 'silence'],
  visualEnvironment: ['beach', 'mountains', 'forest', 'lake', 'rainfall', 'abstract', 'none']
};

// Step 3: Specific Customization (for Manifestation type)
const manifestationFields = {
  category: ['business', 'personal', 'financial', 'career'],
  specificGoals: 'textarea', // User input
  timeline: 'text', // User input
  currentSituation: 'textarea' // User input
};
```

### 3. AI Script Generation

```javascript
// OpenAI Integration for script generation
async function generateMeditationScript(userPreferences) {
  const prompt = `
    Create a ${userPreferences.duration}-minute ${userPreferences.type} meditation script.
    
    User preferences:
    - Focus: ${userPreferences.focus}
    - Goals: ${userPreferences.goals}
    - Style: ${userPreferences.style}
    
    Structure the meditation with:
    1. Opening/grounding (1-2 minutes)
    2. Main practice (core duration)
    3. Closing/integration (1-2 minutes)
    
    Use calming language, proper pacing markers [PAUSE], and natural transitions.
    ${userPreferences.type === 'manifestation' ? `Include specific affirmations about: ${userPreferences.specificGoals}` : ''}
  `;
  
  // Call OpenAI API
  // Return formatted script
}
```

### 4. Text-to-Speech Implementation

```javascript
// Browser-based TTS using Web Speech API
class TextToSpeechService {
  constructor() {
    this.synth = window.speechSynthesis;
    this.voice = null;
  }
  
  init() {
    const voices = this.synth.getVoices();
    // Select American English voice based on user preference (male/female)
    this.voice = voices.find(voice => 
      voice.lang === 'en-US' && 
      voice.name.includes(userPreference.voiceGender)
    );
  }
  
  async generateAudio(text) {
    const utterance = new SpeechSynthesisUtterance(text);
    utterance.voice = this.voice;
    utterance.rate = 0.9; // Slightly slower for meditation
    utterance.pitch = 1.0;
    utterance.volume = 1.0;
    
    // Convert to audio blob for saving
    return this.recordSynthesis(utterance);
  }
}
```

### 5. Meditation Player Component

```typescript
// React component for playing meditations
const MeditationPlayer = () => {
  return (
    <div className="meditation-player">
      {/* Background image based on selection */}
      <div className="visual-background">
        <img src={selectedBackground} />
      </div>
      
      {/* Audio player with controls */}
      <audio controls>
        <source src={meditationAudio} type="audio/mp3" />
      </audio>
      
      {/* Progress bar and timer */}
      <div className="player-controls">
        <button onClick={play}>Play</button>
        <button onClick={pause}>Pause</button>
        <div className="progress-bar"></div>
        <span className="time">{currentTime} / {duration}</span>
      </div>
      
      {/* Background sound mixer */}
      <audio loop>
        <source src={backgroundSound} type="audio/mp3" />
      </audio>
    </div>
  );
};
```

### 6. Database Schema (Replit Database)

```javascript
// User Profile
const userSchema = {
  userId: 'unique_id',
  email: 'user@email.com',
  name: 'User Name',
  authProvider: 'google|apple|email',
  createdAt: 'timestamp',
  meditationCount: 0,
  favorites: [],
  preferences: {}
};

// Meditation Record
const meditationSchema = {
  meditationId: 'unique_id',
  userId: 'user_id',
  type: 'manifestation',
  duration: 10,
  script: 'meditation text...',
  audioUrl: 'base64_audio_data',
  settings: {
    voice: 'female',
    background: 'ocean_waves',
    visual: 'beach'
  },
  customization: {
    goals: 'user specific goals',
    focus: 'specific focus area'
  },
  createdAt: 'timestamp',
  playCount: 0,
  isShared: false,
  rating: 0
};

// Community Meditation
const communitySchema = {
  meditationId: 'unique_id',
  anonymousCreator: true,
  type: 'relaxation',
  duration: 15,
  title: 'User given title',
  description: 'Brief description',
  plays: 0,
  ratings: [],
  averageRating: 0
};
```

### 7. API Endpoints

```javascript
// Backend API routes to implement

// Authentication
POST /api/auth/signup
POST /api/auth/login
POST /api/auth/google
POST /api/auth/apple
GET /api/auth/verify

// Meditation Generation
POST /api/meditation/generate
{
  type: 'manifestation',
  duration: 10,
  voice: 'female',
  background: 'ocean_waves',
  visual: 'beach',
  customization: {
    category: 'business',
    goals: 'Launch my app successfully',
    timeline: '3 months',
    currentSituation: 'Building MVP'
  }
}

// Library Management
GET /api/library/my-meditations
GET /api/library/meditation/:id
POST /api/library/favorite/:id
DELETE /api/library/meditation/:id

// Community Features
GET /api/community/browse
POST /api/community/share/:id
POST /api/community/rate/:id
GET /api/community/popular
```

### 8. Environment Variables (.env)

```
# OpenAI Configuration
OPENAI_API_KEY=your_api_key_here
OPENAI_MODEL=gpt-4

# Firebase Configuration
FIREBASE_API_KEY=your_firebase_api_key
FIREBASE_AUTH_DOMAIN=your_auth_domain
FIREBASE_PROJECT_ID=your_project_id

# Server Configuration
PORT=3000
NODE_ENV=development
JWT_SECRET=your_jwt_secret_here

# Replit Database (automatically configured)
REPLIT_DB_URL=auto_configured
```

### 9. UI Design Requirements

Create a calming, meditation-focused design with:
- Color palette: Soft purples (#8B5CF6), calming blues (#3B82F6), gentle grays (#F3F4F6)
- Typography: Clean, readable fonts (Inter or Poppins)
- Mobile-first responsive design
- Smooth transitions and animations
- Dark mode option
- Accessibility features (keyboard navigation, screen reader support)

### 10. Key React Components to Create

```typescript
// Main App component with routing
const App = () => {
  return (
    <Router>
      <Routes>
        <Route path="/" element={<Landing />} />
        <Route path="/login" element={<Login />} />
        <Route path="/signup" element={<Signup />} />
        <Route path="/create" element={<CreateMeditation />} />
        <Route path="/library" element={<MyLibrary />} />
        <Route path="/community" element={<Community />} />
        <Route path="/play/:id" element={<MeditationPlayer />} />
        <Route path="/profile" element={<Profile />} />
      </Routes>
    </Router>
  );
};
```

## Setup Instructions to Include

1. **OpenAI API Key Setup**:
   - Direct users to https://platform.openai.com/api-keys
   - Explain how to create an account and generate API key
   - Show where to add it in .env file

2. **Firebase Setup**:
   - Guide to https://console.firebase.google.com
   - Steps to create project
   - Enable Authentication
   - Configure Google and Apple Sign-In
   - Copy configuration keys

3. **Background Images**:
   - Include links to free stock photo sites
   - Recommend specific calming images
   - Show how to optimize images for web

4. **Testing Instructions**:
   - How to test locally
   - Beta testing checklist
   - User feedback collection setup

## Mobile Optimization Requirements

- Viewport meta tag configuration
- Touch-friendly buttons (minimum 44x44px)
- Swipe gestures for navigation
- Progressive Web App (PWA) configuration
- iOS and Android home screen icons
- Offline capability with service workers

## Beta Testing Features

Since this is free for beta testing:
- Include a feedback widget on every page
- Add analytics to track user behavior
- Create an admin dashboard to view:
  - Total users
  - Meditations generated
  - Most popular types
  - Average session length
  - User feedback
- Beta badge/banner indicating free access
- Email collection for launch notification

## Future Migration Path

Include comments and structure for easy addition of:
- Payment processing (Stripe integration points)
- Premium feature flags
- Usage limiting logic
- ElevenLabs API integration
- React Native wrapper for mobile apps
- App store deployment preparation

## Performance Optimizations

- Lazy loading for images
- Audio file compression
- Caching strategies for generated meditations
- CDN setup for static assets
- Database indexing for common queries

## Error Handling

Implement comprehensive error handling for:
- API failures (OpenAI rate limits)
- TTS failures (fallback to different voice)
- Network issues (offline mode)
- Invalid user inputs
- Database connection issues

## Security Measures

- Input sanitization for user-generated content
- Rate limiting on API endpoints
- Secure storage of API keys
- HTTPS enforcement
- CORS configuration
- SQL injection prevention (even with NoSQL)

Please create this complete application with all files, proper error handling, responsive design, and clear code comments. Include a comprehensive README with setup instructions, and make sure all components are fully functional for beta testing.